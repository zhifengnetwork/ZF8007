<?php
/**
 * Created by PhpStorm.
 * User: MyPc
 * Date: 2019/4/23 0023
 * Time: 18:04
 */
namespace app\admin\controller;

use think\Db;
use think\Session;

class Article extends Base
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        check_user();
    }

    public function lists()
    {
        $where['id'] = ['>', 0];
        $datemin = '';
        $datemax = '';
        $seach = isset($_GET['seach']) ? $_GET['seach'] : '';
        $page = 10;

        //搜索条件
        if($seach){
            $page = 0;
            $time = " 23:59:59";
            if($seach['m_conditions']){
                $m_conditions = str_replace(' ', '', $seach['m_conditions']);
                $where['article_title'] = ['like',"%$m_conditions%"];
            }
            if ($seach['datemin'] && $seach['datemax']) {
                $datemin = strtotime($seach['datemin']);
                $datemax = strtotime($seach['datemax'].$time);
                $where['add_time'] = [['>= time',$datemin],['<= time',$datemax],'and'];
            } elseif ($seach['datemin']) {
                $where['add_time'] = ['>= time',strtotime($seach['datemin'])];
            } elseif ($seach['datemax']) {
                $where['add_time'] = ['<= time',strtotime($seach['datemax'].$time)];
            }
        }

        $list = Db::name('article')->where($where)->paginate($page);
        $count = count($list);
        $this->assign('seach',$seach);
        $this->assign('list',$list);
        $this->assign('count',$count);
        return $this->fetch();
    }

//    // 搜索条件
//    public function s_condition($conditions, $datemins, $datemaxs,$role)
//    {
//        $time = " 23:59:59";
//        if ($conditions) {
//            $m_conditions = str_replace(' ', '', $conditions);
//            $where['name'] = ['like', "%$m_conditions%"];
//        }
//        if ($datemins && $datemaxs) {
//            $datemin = strtotime($datemins);
//            $datemax = strtotime($datemaxs . $time);
//            $where['addtime'] = [['>= time', $datemin], ['<= time', $datemax], 'and'];
//        } elseif ($datemins) {
//            $where['addtime'] = ['>= time', strtotime($datemins)];
//        } elseif ($datemaxs) {
//            $where['addtime'] = ['<= time', strtotime($datemaxs . $time)];
//        } elseif ($role) {
//            $where['group_id'] = $role;
//        }
//        return $where;
//    }

    public function add()
    {
        $act = 'add';
        $this->assign('act',$act);
        return $this->fetch();
    }

    public function edit()
    {
        $art_id = input('get.id/d');
        $act = 'edit';
        $info = Db::name('article')->where('id',$art_id)->find();
        $this->assign('info',$info);
        $this->assign('art_id',$art_id);
        $this->assign('act',$act);
        return $this->fetch();
    }

    public function handle()
    {
        $data = input('post.');
        //文本内容
        if (empty($data['editorValue']))return json(['status'=>-1,'msg'=>'还没写内容啊。']);
        $content = mb_substr($data['editorValue'],3,-4,'utf-8');
        $data['editorValue'] = $content;
//        dump($data);die;

        if ($data['act'] == 'add') {
            $data1 = [
                'type' => $data['type'],
                'article_title' => $data['title'],
                'content' => $data['editorValue'],
                'article_id'   => session('admin_id'),
                'add_time'  => time()
            ];
            $res = Db::name('article')->insert($data1);
            if ($res) {
                return json(['status'=>1,'msg'=>'添加成功']);
            }else{
                return json(['status'=>-1,'msg'=>'添加失败']);
            }
        }
        if ($data['act'] == 'edit') {
            $data1 = [
                'type' => $data['type'],
                'article_title' => $data['title'],
                'content' => $data['editorValue'],
                'article_id'   => session('admin_id'),
                'add_time'  => time()
            ];
            $res = Db::name('article')->where('id',$data['art_id'])->update($data1);
            if ($res) {
                return json(['status'=>1,'msg'=>'添加成功']);
            }else{
                return json(['status'=>-1,'msg'=>'添加失败']);
            }
        }
    }

    public function del()
    {
        $data = input('post.');//dump($art_id);die;
        if ($_POST) {
            $id = json_decode($data['id'], true);
            $where['id'] = array('in', $id);
            $res = Db::name('article')->where($where)->delete();
            if ($res) {
                return json(['status'=>1,'msg'=>'删除成功']);
            }else {
                return json(['status'=>-1,'msg'=>'删除失败']);
            }
        }
    }
}